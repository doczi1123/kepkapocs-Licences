"""Ez autzomatikusan felt√∂lti a g√©p k√≥dj√°t a githubra"""

import json
import hashlib
import uuid
import os
import socket
from datetime import date, timedelta
from sign_pairs import sign_pairs_file
from git import Repo

PAIRS_PATH = "pairs.json"
SIG_PATH = "pairs.siget"

def get_machine_id():
    # Hostname + MAC address kombin√°ci√≥b√≥l gener√°lt SHA256 azonos√≠t√≥
    hostname = socket.gethostname()
    mac = hex(uuid.getnode())
    raw = (hostname + mac).encode()
    return hashlib.sha256(raw).hexdigest()

def generate_viewer_id():
    """√öj viewer azonos√≠t√≥ gener√°l√°sa"""
    return "VIEWER-" + uuid.uuid4().hex[:10].upper()

def add_machine_to_pairs(valid_days=365, viewer_id=None):
    machine_id = get_machine_id()
    viewer_id = viewer_id or generate_viewer_id()
    valid_until = (date.today() + timedelta(days=valid_days)).isoformat()

    # Bet√∂lt√©s vagy l√©trehoz√°s
    if os.path.exists(PAIRS_PATH):
        with open(PAIRS_PATH, "r", encoding="utf-8") as f:
            try:
                pairs = json.load(f)
            except:
                pairs = []
    else:
        pairs = []

    # M√°r regisztr√°lt?
    for entry in pairs:
        if entry.get("uploader_id") == machine_id:
            print("‚ÑπÔ∏è A g√©p m√°r szerepel a pairs.json f√°jlban.")
            return

    # √öj p√°ros hozz√°ad√°sa
    pairs.append({
        "uploader_id": machine_id,
        "viewer_id": viewer_id,
        "valid_until": valid_until
    })

    with open(PAIRS_PATH, "w", encoding="utf-8") as f:
        json.dump(pairs, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ G√©ped hozz√°adva a pairs.json f√°jlhoz.")
    print(f"üìå Viewer ID: {viewer_id}")
    print(f"üìÖ Aktiv√°ci√≥ √©rv√©nyes: {valid_until}")

    # Digit√°lis al√°√≠r√°s gener√°l√°sa
    sign_pairs_file(PAIRS_PATH, SIG_PATH)
    print(f"üîê pairs.siget l√©trehozva: {SIG_PATH}")

    # Felt√∂lt√©s GitHubra
    push_to_github()

def push_to_github():
    try:
        repo = Repo(".")
        repo.git.add(PAIRS_PATH)
        repo.git.add(SIG_PATH)
        repo.index.commit("üÜï Automatikus g√©pregisztr√°ci√≥ + al√°√≠r√°s")
        origin = repo.remote(name="origin")
        origin.push()
        print("üöÄ V√°ltoz√°sok felt√∂ltve GitHubra (kepkapocs-Licences)")
    except Exception as e:
        print(f"‚ùå Git push hiba: {e}")

if __name__ == "__main__":
    add_machine_to_pairs()
